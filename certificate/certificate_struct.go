// Package certificate implements the certificate common-structure of I2P.
package certificate

import (
	"github.com/samber/oops"
	"github.com/sirupsen/logrus"

	. "github.com/go-i2p/common/data"
	"github.com/go-i2p/logger"
)

var log = logger.GetGoI2PLogger()

/*
[I2P Certificate]
Accurate for version 0.9.49

Description
A certifificate is a container for various receipts of proof of works used throughout the I2P network.

Contents
1 byte Integer specifying certificate type, followed by a 2 byte Integer specifying the size of the certificate playload, then that many bytes.

+----+----+----+----+----+-//
|type| length  | payload
+----+----+----+----+----+-//

type :: Integer
        length -> 1 byte

        case 0 -> NULL
        case 1 -> HASHCASH
        case 2 -> HIDDEN
        case 3 -> SIGNED
        case 4 -> MULTIPLE
        case 5 -> KEY

length :: Integer
          length -> 2 bytes

payload :: data
           length -> $length bytes
*/

// Certificate is the representation of an I2P Certificate.
//
// https://geti2p.net/spec/common-structures#certificate
type Certificate struct {
	kind    Integer
	len     Integer
	payload []byte
}

// NewCertificate creates a new Certificate with default NULL type
func NewCertificate() *Certificate {
	return &Certificate{
		kind:    Integer([]byte{CERT_NULL}),
		len:     Integer([]byte{0}),
		payload: make([]byte, 0),
	}
}

// NewCertificateDeux creates a new Certificate with specified type and payload
func NewCertificateDeux(certType int, payload []byte) (*Certificate, error) {
	if certType < 0 || certType > 255 {
		return nil, oops.Errorf("invalid certificate type: %d", certType)
	}
	certTypeByte := byte(certType)

	if len(payload) > 65535 {
		return nil, oops.Errorf("payload too long: %d bytes", len(payload))
	}

	_len, err := NewIntegerFromInt(len(payload), 2)
	if err != nil {
		panic(err)
	}
	cert := &Certificate{
		kind:    Integer([]byte{certTypeByte}),
		len:     *_len,
		payload: payload,
	}

	log.WithFields(logrus.Fields{
		"type":   certType,
		"length": len(payload),
	}).Debug("Successfully created new certificate")

	return cert, nil
}

// NewCertificateWithType creates a new Certificate with specified type and payload
func NewCertificateWithType(certType uint8, payload []byte) (*Certificate, error) {
	// Validate certificate type
	switch certType {
	case CERT_NULL, CERT_HASHCASH, CERT_HIDDEN, CERT_SIGNED, CERT_MULTIPLE, CERT_KEY:
		// Valid type
	default:
		return nil, oops.Errorf("invalid certificate type: %d", certType)
	}

	// For NULL certificates, payload should be empty
	if certType == CERT_NULL && len(payload) > 0 {
		return nil, oops.Errorf("NULL certificates must have empty payload")
	}
	length, _ := NewIntegerFromInt(len(payload), 2)

	cert := &Certificate{
		kind:    Integer([]byte{certType}),
		len:     *length,
		payload: make([]byte, len(payload)),
	}

	// Copy payload if present
	if len(payload) > 0 {
		copy(cert.payload, payload)
	}

	return cert, nil
}

// RawBytes returns the entire certificate in []byte form, includes excess payload data.
func (c *Certificate) RawBytes() []byte {
	bytes := c.kind.Bytes()
	bytes = append(bytes, c.len.Bytes()...)
	bytes = append(bytes, c.payload...)
	log.WithFields(logrus.Fields{
		"raw_bytes_length": len(bytes),
	}).Debug("Generated raw bytes for certificate")
	return bytes
}

// ExcessBytes returns the excess bytes in a certificate found after the specified payload length.
func (c *Certificate) ExcessBytes() []byte {
	if len(c.payload) >= c.len.Int() {
		excess := c.payload[c.len.Int():]
		log.WithFields(logrus.Fields{
			"excess_bytes_length": len(excess),
		}).Debug("Found excess bytes in certificate")
		return excess
	}
	log.Debug("No excess bytes found in certificate")
	return nil
}

// Bytes returns the entire certificate in []byte form, trims payload to specified length.
func (c *Certificate) Bytes() []byte {
	bytes := c.kind.Bytes()
	bytes = append(bytes, c.len.Bytes()...)
	bytes = append(bytes, c.Data()...)
	log.WithFields(logrus.Fields{
		"bytes_length": len(bytes),
	}).Debug("Generated bytes for certificate")
	return bytes
}

// length returns the total certificate length in bytes.
func (c *Certificate) length() (cert_len int) {
	cert_len = len(c.Bytes())
	return
}

// Type returns the Certificate type specified in the first byte of the Certificate,
func (c *Certificate) Type() (cert_type int) {
	cert_type = c.kind.Int()
	log.WithFields(logrus.Fields{
		"cert_type": cert_type,
	}).Debug("Retrieved certificate type")
	return
}

// Length returns the payload length of a Certificate.
func (c *Certificate) Length() (length int) {
	length = c.len.Int()
	log.WithFields(logrus.Fields{
		"length": length,
	}).Debug("Retrieved certificate length")
	return
}

// Data returns the payload of a Certificate, payload is trimmed to the specified length.
func (c *Certificate) Data() (data []byte) {
	lastElement := c.Length()
	if lastElement > len(c.payload) {
		data = c.payload
		log.Warn("Certificate payload shorter than specified length")
	} else {
		data = c.payload[0:lastElement]
	}
	log.WithFields(logrus.Fields{
		"data_length": len(data),
	}).Debug("Retrieved certificate data")
	return
}
