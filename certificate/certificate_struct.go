// Package certificate implements the certificate common-structure of I2P.
package certificate

import (
	"github.com/samber/oops"
	"github.com/sirupsen/logrus"

	"github.com/go-i2p/common/data"
	"github.com/go-i2p/logger"
)

var log = logger.GetGoI2PLogger()

/*
[I2P Certificate]
Accurate for version 0.9.49

Description
A certifificate is a container for various receipts of proof of works used throughout the I2P network.

Contents
1 byte Integer specifying certificate type, followed by a 2 byte Integer specifying the size of the certificate playload, then that many bytes.

+----+----+----+----+----+-//
|type| length  | payload
+----+----+----+----+----+-//

type :: Integer
		length -> 1 byte

		case 0 -> NULL
		case 1 -> HASHCASH
		case 2 -> HIDDEN
		case 3 -> SIGNED
		case 4 -> MULTIPLE
		case 5 -> KEY

length :: Integer
		  length -> 2 bytes

payload :: data
		   length -> $length bytes
*/

// Certificate is the representation of an I2P Certificate.
//
// https://geti2p.net/spec/common-structures#certificate
type Certificate struct {
	kind    data.Integer
	len     data.Integer
	payload []byte
}

// NewCertificate creates a new Certificate with default NULL type
func NewCertificate() *Certificate {
	return &Certificate{
		kind:    data.Integer([]byte{CERT_NULL}),
		len:     data.Integer([]byte{CERT_EMPTY_PAYLOAD_SIZE}),
		payload: make([]byte, CERT_EMPTY_PAYLOAD_SIZE),
	}
}

// NewCertificateDeux creates a new Certificate with specified type and payload.
// Deprecated: Use NewCertificateWithType instead. This function will be removed in v2.0.
func NewCertificateDeux(certType int, payload []byte) (*Certificate, error) {
	log.WithFields(logrus.Fields{
		"at":        "NewCertificateDeux",
		"reason":    "deprecated function called",
		"cert_type": certType,
	}).Debug("NewCertificateDeux is deprecated, use NewCertificateWithType instead")

	if certType < CERT_EMPTY_PAYLOAD_SIZE || certType > CERT_MAX_TYPE_VALUE {
		return nil, oops.Errorf("invalid certificate type: %d", certType)
	}
	return NewCertificateWithType(uint8(certType), payload)
}

// NewCertificateWithType creates a new Certificate with specified type and payload
func NewCertificateWithType(certType uint8, payload []byte) (*Certificate, error) {
	// Validate certificate type
	switch certType {
	case CERT_NULL, CERT_HASHCASH, CERT_HIDDEN, CERT_SIGNED, CERT_MULTIPLE, CERT_KEY:
		// Valid type
	default:
		return nil, oops.Errorf("invalid certificate type: %d", certType)
	}

	// Validate payload length
	if len(payload) > CERT_MAX_PAYLOAD_SIZE {
		return nil, oops.Errorf("payload too long: %d bytes", len(payload))
	}

	// For NULL certificates, payload should be empty
	if certType == CERT_NULL && len(payload) > CERT_EMPTY_PAYLOAD_SIZE {
		return nil, oops.Errorf("NULL certificates must have empty payload")
	}

	length, err := data.NewIntegerFromInt(len(payload), CERT_LENGTH_FIELD_SIZE)
	if err != nil {
		return nil, oops.Errorf("failed to create length integer: %w", err)
	}

	cert := &Certificate{
		kind:    data.Integer([]byte{certType}),
		len:     *length,
		payload: make([]byte, len(payload)),
	}

	// Copy payload if present
	if len(payload) > CERT_EMPTY_PAYLOAD_SIZE {
		copy(cert.payload, payload)
	}

	return cert, nil
}

// RawBytes returns the entire certificate in []byte form, includes excess payload data.
func (c *Certificate) RawBytes() []byte {
	bytes := c.kind.Bytes()
	bytes = append(bytes, c.len.Bytes()...)
	bytes = append(bytes, c.payload...)
	log.WithFields(logrus.Fields{
		"raw_bytes_length": len(bytes),
	}).Debug("Generated raw bytes for certificate")
	return bytes
}

// ExcessBytes returns the excess bytes in a certificate found after the specified payload length.
func (c *Certificate) ExcessBytes() []byte {
	if len(c.payload) >= c.len.Int() {
		excess := c.payload[c.len.Int():]
		log.WithFields(logrus.Fields{
			"excess_bytes_length": len(excess),
		}).Debug("Found excess bytes in certificate")
		return excess
	}
	log.Debug("No excess bytes found in certificate")
	return nil
}

// Bytes returns the entire certificate in []byte form, trims payload to specified length.
func (c *Certificate) Bytes() []byte {
	bytes := c.kind.Bytes()
	bytes = append(bytes, c.len.Bytes()...)
	payload, err := c.Data()
	if err != nil {
		log.WithFields(logrus.Fields{"at": "Certificate.Bytes", "reason": "invalid payload"}).Error(err.Error())
		// Return only type and length fields if payload is invalid
		return bytes
	}
	bytes = append(bytes, payload...)
	log.WithFields(logrus.Fields{
		"bytes_length": len(bytes),
	}).Debug("Generated bytes for certificate")
	return bytes
}

// length returns the total certificate length in bytes.
func (c *Certificate) length() (certLen int) {
	certLen = len(c.Bytes())
	return
}

// Type returns the Certificate type specified in the first byte of the Certificate,
// Type returns the certificate type as int, with validation and error context.
func (c *Certificate) Type() (certType int, err error) {
	certType = c.kind.Int()
	if certType < CERT_NULL || certType > CERT_MAX_TYPE_VALUE {
		log.WithFields(logrus.Fields{
			"at":        "Certificate.Type",
			"reason":    "invalid certificate type",
			"cert_type": certType,
		}).Error("Certificate type out of bounds")
		err = oops.Errorf("invalid certificate type: %d (must be 0-%d)", certType, CERT_MAX_TYPE_VALUE)
		return 0, err
	}
	log.WithFields(logrus.Fields{
		"cert_type": certType,
	}).Debug("Retrieved certificate type")
	return certType, nil
}

// Length returns the payload length of a Certificate.
// Length returns the payload length of a Certificate, with validation and error context.
func (c *Certificate) Length() (length int, err error) {
	length = c.len.Int()
	if length < CERT_EMPTY_PAYLOAD_SIZE || length > CERT_MAX_PAYLOAD_SIZE {
		log.WithFields(logrus.Fields{
			"at":     "Certificate.Length",
			"reason": "invalid certificate length",
			"length": length,
		}).Error("Certificate length out of bounds")
		err = oops.Errorf("invalid certificate length: %d (must be 0-%d)", length, CERT_MAX_PAYLOAD_SIZE)
		return 0, err
	}
	log.WithFields(logrus.Fields{
		"length": length,
	}).Debug("Retrieved certificate length")
	return length, nil
}

// Data returns the payload of a Certificate, payload is trimmed to the specified length.
// Data returns the payload of a Certificate, trimmed to the specified length. Returns error if length is invalid.
func (c *Certificate) Data() (data []byte, err error) {
	length, lenErr := c.Length()
	if lenErr != nil {
		log.WithFields(logrus.Fields{"at": "Certificate.Data", "reason": "invalid length"}).Error(lenErr.Error())
		return nil, lenErr
	}
	if length > len(c.payload) {
		data = c.payload
		log.Warn("Certificate payload shorter than specified length")
	} else {
		data = c.payload[0:length]
	}
	log.WithFields(logrus.Fields{
		"data_length": len(data),
	}).Debug("Retrieved certificate data")
	return data, nil
}
